<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022秋学期总结</title>
    <url>./2023012226/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="16400edab241b3b1722481b2ace2b5176446a7e58a021baf4fce676f44d4ad67">4085ae3d0da14ca5aedfbef54e630317fb3bbefa7cb56e0ffbd2dccf753ee457b4d9073c4a0aba7ef5689c09b9178e8c7e6166319141ff8fe0933d9c3914e37fc308093f7d746fff6122607c7848f62f8b25d4f4f496ce9b5d864b262247fe9894c16770e3450eb2b4300f0c4493999452c947fc7cdf5920774019a3490e5ea4c03bd562338323b3969e1a545940d3c1ab852b882b6530a2575458e735a2e1d4f0d6cb524d7a00ac2a7e929ff3994d35dc57fa9d14307d11da90f6eee13ae020a7f24bbc1066a4aea17982b7f7986ec66190c53cb557086dfabfb15d0767f8464966935a55b765d02632dbe5e84142f4023faa974de06632b4672ade98e082c0a6b3d7208a05e4b29068a48f7cfad27ca9a7a9e670a1591d71ac297f3183cc6c6759a5fcba10104f6e6d6f1094d23878de62a84f9c15309f5da237ec779c218f9f4070ad725bfa2ed5b064a95dfc7c431fba260bbd2816395082788ffd10e2fa2201783e67f2dc3afb83c2c47563cdcae76e78a3983f5833de054a37a73e9d1fcf8bb2cfa2feec9d8ed1c61f9791af9b329915e8bdf3641b93b78df3993f07bb9d6273510ebf743b1327d2e8a29d61c8179221410a108385a09b4c1acb3367d8b57512d62fbfdab1f32df9eeead03e490cb66940bfb4f673a17d3c2f06bd3faae67b306d63f8558b80fee7084c43628e22e627915ba00665bdc4e44177a2f90a214491ee553772632d75e92ae21f074a171b49210c184d781381b5c40f60bfd998f9703665c5d7e3cebebaded882db28bac8f36f05fc0f21802e1096fc7862d5c081bc19a67da8e7ed50eba0c68e6e06c94e6f715ec6e02ee9404df81098857d8257736a3be5aa7c7f820fe2fcca4da9f4f2500db84a47dd3bfb6653f2b4b17c10c3dcbf48f330cddd59dd8eafb17f3cd5b5aef5ee7a4e2d94092a1e75eabe460792ba1c98eeef5574d40b1387548a7ae80c55053001342eb2041f031c93f55dd648ac7c8b3566876b41b65401db2bb1a672a32061ace26bcc0feb20d55227ce667dcaf463efbe0d8455391bf5b2c71ef416e7288aaa12facffd8fa7054621cab155a5d653f08ca9af455ceaa19a69885c833ef0b789674f5667c9fd12818bc9c276ff568a59988107cc091f247c16c9678df6cdb27b0b7389f800a2b765f37b4de6f072612d236b2edcfe3668d22974cebdc172a18cea6a379709c574c770347c043afa9e1209f66280c9e838bd6be97d7d2f1ffe55ee581fe0df3432e4d6739ca7f50ea81ac16d189ec0ff79fc3f91c50d1b5f6a897bcc5d72267e00713c692d9ae34514709598ff915a37c525ad23b5db088615997dbccebd7ddb3016131c7ce19a9bd88a7eb2e469dd8002b1c1ef8b3b7d45793d9f700fc975a06817dd8e61dcd0de68fb633eaeb013d688bba1025816dcdb794a49e0a50e8334bc135f5e623be5a671f3ca6fdbf50f6e80c457f34676c56d84a3a1d83651a9c0ad7ccb410d28f9b0653833fd83a88e7cdf76c329467932f6e0d5c8c8d714de75fce73924bbbb5bbebc6ad133c5d78ea85531fb940d2581419fb797395ef989a7d3617481436031bf62f51674b889e8ba07c1ca00a231253ea5d9716de6254cac5117c50286683157b5fdc33b4ead83519c4d7319c257cde2ac8df5ad15e27665f1191265f3e840b0c36da516c04eacf65c9259df02616d13eb6182099463bc42578acd5e740dcbbd8febbc757661d5d3b07c82c5bbe0a57cceac0170f40a370482ac0eb70ed8ced3b8343ac27f63025f698357faf1e3b273e95dc314ce5be0f8f15c22b593b446d00b04b4994830100616beb5d8b495e7203afd47e0b1838d4542d713faaa657f80dded1c1c85a476959c02de61932cd000a5fb9bfc07493330fd6ba3ca52ed646ec24d2ab38e123a427567efd7a575453bb007eaad899ce638de8f94a7c8791a6915e95de85d9b0a9d78f033fd428cd51ba6ebb355087f02cb8015f1d8d2290a94d38e033ac307a5295535845da001533a670fc2427171c8730007c57ddec4f5f16a65390fe06fc0a86ec0b18d04acc68ba1a56c353b8cc0f89b305a1e57e5122097d654be8c0c53e6c5f99b024d1ec6b04f9725698197fdfe6d89e244266014237661e7f9fb2e131782ac486ccbb88b38ed3dc4f426451f5306b89a0b6a7a61008094f2e51576fccea98c6e8564317739744c1900cabcac4856f8573efbda3276ceebc01ba2d524b31c0364411860504913acf0322a8ec86ae5550450696f0b6f33a296a9cab1bdc0b8d99f57770206b7fea8c3a56c38e746b7f00ac50149b01319760e24c64219e9d2aa1226e5e7458944431e29c058b36e0ea4f417fb57484781391e7d409971708f356530a3d5747359464e001431840650e67405e8061e195e511a492d6bae4a4c2888f4baa679aebe1d58d9dcc4702a44a1e1d67bef62c5a6900f53c82f725b6aaba52c06fb092b28b1e59393dc1568b3ed5d3ecec69f6f073775b393f5bf72eec294c5098543f56563b861d5ca7fdd0cf31511fc48d3133019d06988f7c4492b46bbc617e1132d6c6f7737eda03800fd0741ddf4286c8a2e7fc5aa1191938a4d1d6cd381d5dc52f2baa955756f6eff41a912b766999b91ec4136493d704aabdc2b4944d4b0decb581b56f7712982b2894e021df881d54a34d7212a52c25701b4f5c7d8de8c0dc378bd66b64b7af25ed4ef6aff2cd54bea0b5d713629f2e9fb65028970bcca47a93d55760e8c903aa7418ee79d94965a3c33bd93888f03952692f7ca3791416afc9851d266d26387a6b7642fb5d2012a93576ec2858003ed248567e3e9740fe9d8ffb69450b0c775e39e9bc05688a8addf269d137acefee2923c1170c3eac8b6bca6e683d3b6aa3148a750d6c21a3ff7d61c482c186cacc627aa95450ec0e78188f733c86ebbb40494bde9e151f0fb4eaec5959c3e94c0b9f108e584825f8e7f4d7e02b0416be50eb35423aacba14476372758635440ef3f0d6f9d92651901513ad5b5fc75cc8844387e438d17179f0169d249829f3880eb67f93cf7cc1ea89320879cd614914e82f70494fa770f9393d0730320a9a3ce379a89dd95af63f93a91b2a8afdc5acc472dbba6fb414d6ecd0244a167f727f56750add5041a0117933f306de0c87ba4a69af20f5e83fcad4d849cf2e5e0af4e1da27c7ea2bbfb0a76e9a8867b85249ff41f25e66ae55ee68e46423943013e89b29cdc985a8a651abe35c2a651993bf1df00649c08fddef5dcf6453b75412c28e14d30114ab6011590ef0ea0f126f5873bf55824be51194a09f1d370b8805f0e84500426a00c6695a796b5bafbd0d1ba78efdf3d3392cbd0f4c18ad414cbef3dd0077fb093cb6e152a18ce2d9802e1e2f3bb0691e4c1da21f379c54f53f8716bab38e0aa4398adca92469d8a9d59d9c9caf5f9e5a61f290baef5fe29802735430fd2e7c028d697dab3cdd110a096b3cb3443df42d894134cad7ad593f8d890af4f26f89771eef66844d24f01da89e464487e50d9d139074b8ffaa60dba2a9830447bc7b65e9964402408b5f5b54b4e1638c8530ce5147aaf964744d6955f90e25b84a1742ee37ec311b5b6bb434a3e43fc5296747c04f405c7d3a131ffe7546744571665a7a600108a6dc5b3c8c07a740162db2b6ad01591e0d3b2b7dd3978877457f1fe36042dbbb27869df59d4f9949e5052dcb8fbc2858a1d7b1a6aff81499060b87c0a8e2976f59f33f4fdd434a3b4b726b2c49efc4569ea52add23cd2fb96c456e8f90772a9ef64863cf71500eddd8c1e84f29574219f66d21b80874b1e61d94e5d2ca74c6a11c78f2b514a51d0fe6ff448bb4236f2970213355036dae0e493960e8f4f459dd9c1de0413c400778fa65b803a4a8002de9d9faeee71f6f358cd5ddb034eabcf821615f94d7f62e784c794acba565ffd6c1aa9dc0fc34a055de41f6ff747617abb971b7b1db8f8c07cfca22c3ede721e33e0223004304e24483b802eb3a6fbf839626051f627e33144990a0313b8822ed664159ab903465e52aef762a0dc82b0e0b110a32b1a0c150a00f2e7c45267577133f9da3ab18d0307df3091aeafd023c69090d675cc07ed8ba930883d9b2bceffd3a3db247f5e56e750ad262fd382a508d0ec4b06176532277839e6afba7623c92828f3c5a18bf094cac666e7acf9d2ac216f78da8590a5a18568b6f4f9d911eac47a4dd485eb6aa1868497d7c7ced9b9b0fd1c21a5a013a8de4d8c78848a2b89a4542e5bcc6fc138aa3a5821a6a5c7289e1a24437557fcb6abca9a868cbccd30faeb8f076f9ba3b669394d8b688673d39f008af9e8786063f4c85fea8ccca83d84cfb36a21623d14077a3e01565baf0f701a96c2987f5549f6a0ff6f3add3080abdb4b9bbad9b1b788ac12c2466abfa2d2e72e62ff87faee74edc2e50e0de3bc7b14468626ab5e9845bfd50ffe7a55109dc361d9ce6e6ea97feb3fb18fd8c887ab3f85560d806f4257f7516b204d3043f545563558e3470a74cd5c94d342761ba2ebb4a49cb9b7e30d996d39f609bc05c465fbea8720538fa7171100d4b8999cf18cc995bfa6000291c247f0a8f73a8ba87b27c29b9bb2f3f162deeec1bcd394e150161f0c7de15fa38a79971da2631d0ca48068420810fe6b16839835ade654d6122d6d97b518d9e04675dbaa6bf91c0dd3928664355955dcb435293031aa50438a5bab13845af8745244cc5a9f96427bd55ba6c1464bbb76ed49db68760e0c1079afd3e0640bd79b8f893efc1034117a33accf9694698137245abdcf48f80d58fc0cc020ed566f325dad6d68464628428e0d9b5d54e298af69b69ef024b3d26e66127440b564481e4a8c851382e8789ecc7dd4c2d5fa3845f78c91e05ca447068703ea3ce341bc16d4550cc66b1ec7cf2a9e716c439ace2f46ada3dbfedb0420ac158ae01007f11e629bf0a9b196191ba4b97a5517d973bd9a48fbfadeb13a65ac1aa390e58859308458c205f97c8e505af317c636eb6fd7e65465a86e40e0ae996842e2a25efce98ad1508a174d595fde6f500c53dc3faa1cdfae6a0d093b52f725db8b1cb4b7b1ba19df536f374f1fcb2212e9654a1845331fc7b6d0b58b5450bf45f6cb5470cc66685d5daf6250758fe9ed1a04ebdf401e6ad32f9a42e02adb0409aaa9061b6b221dd1ed5d4ff1012ab610bf4a98fc672520110161dc25f981216feb30a2f264a4c88465f34a5f46f51f674e535a822f5b3cb32e056e0c7cef6fc6cfd5a57701040d6457695f2f7ddb267247d766c9327c373c94abb6fae6d989cacbb8b73b723315985aedd2b392dfc7d78d9654c7b0ac3c95184b4f1d2b776a81bda5531e4919175cc1c50d2267fbdb859b8531a93785b9d2d3dc7648c68763ec84d00c4006408680cee0b18af176d2652c2e31b9d4c3500cf7d47c637860c4592901b734f71036a7eac9009a66316f21bcb142f2dd97a9d6f961d6be589926bf14960d0b5c04d68b030c1b913d1748db17c3d415bcecdaa02e6644627c26fb5b0f2da8d0cdf5e40cbd29a967331cca434c6650b4f759f15c20b66d250c0263f16b8c942bcecb52d58894a53031378cb66c34d26c0e4366f1011cef4a962caad4b5cd2ff467e32fb7cc9a9e63cb9580cd4bb1bd5d6a8944e16566dfdb07d25cd7a57e6cb4634fcb4ef93ee3dddf9aa31df3fe0ac8926cd356de8b058ef24e5ef0a58756ea368c1101637fc38ce4686781a066a04a4be09fcc1a4772ef2139e742025fc0b45f984ab62d507e56f4c98ff776e728d9a141e30dd8922e67d54b01e9b6d729103d1e5ace29771396482bcaf91a44b933d692833cf5552d6e00fbfd176679d49c391c02bbc5deb85730c6d9c66fb00b3280a9fff83169b9600df38268b1f3d22b225595b8d0c219f46fe42c725b29b097b378f10a6644778a78b94273b677fed2748f1db5339eab5ebf1c554412cff1621ea69b189fbb6e5a1e1a1c8d5c12889156f58bf37c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">FORBIDDEN</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="./lib/hbe.js"></script><link href="./css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Summary</category>
      </categories>
      <tags>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST-数字识别</title>
    <url>./2023012216/</url>
    <content><![CDATA[<p>来源kaggle的数字识别源码学习。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense,Dropout,Flatten,Conv2D,MaxPool2D,BatchNormalization</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> LearningRateScheduler</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">r&#x27;E:\train.csv&#x27;</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">r&#x27;E:\test.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Why？</span></span><br><span class="line">Y_train = train[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">X_train = train.drop(labels=[<span class="string">&#x27;label&#x27;</span>],axis=<span class="number">1</span>)</span><br><span class="line">X_test = X_train / <span class="number">255.0</span></span><br><span class="line">X_test = test / <span class="number">255.0</span></span><br><span class="line">X_train = X_train.values.reshape(-<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)</span><br><span class="line">X_test = X_test.values.reshape(-<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 调用to_categorical将label按10个类别转换为独热编码</span></span><br><span class="line">Y_train = to_categorical(Y_train,num_classes=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 绘制子图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">4.5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">10</span>,i+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># ？？？</span></span><br><span class="line">    plt.imshow(X_train[i].reshape((<span class="number">28</span>,<span class="number">28</span>)),cmap=plt.cm.binary)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.subplots_adjust(wspace=-<span class="number">0.1</span>,hspace=-<span class="number">0.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="./irorange27.github.io/2023012216/output_3_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ？</span></span><br><span class="line">datagen = ImageDataGenerator(</span><br><span class="line">        rotation_range=<span class="number">10</span>,</span><br><span class="line">        zoom_range=<span class="number">0.10</span>,</span><br><span class="line">        width_shift_range=<span class="number">0.1</span>,</span><br><span class="line">        height_shift_range=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Perview augmented images</span></span><br><span class="line">X_train3 = X_train[<span class="number">9</span>,].reshape((<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))</span><br><span class="line">Y_train3 = Y_train[<span class="number">9</span>,].reshape((<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">4.5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">10</span>,i+<span class="number">1</span>)</span><br><span class="line">    X_train2,Y_train2 = datagen.flow(X_train3,Y_train3).<span class="built_in">next</span>()</span><br><span class="line">    plt.imshow(X_train2[<span class="number">0</span>].reshape((<span class="number">28</span>,<span class="number">28</span>)),cmap=plt.cm.binary)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>:X_train3 = X_train[<span class="number">11</span>,].reshape((<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">19</span>:X_train3 = X_train[<span class="number">18</span>,].reshape((<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))</span><br><span class="line">plt.subplots_adjust(wspace=-<span class="number">0.1</span>,hspace=-<span class="number">0.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="./irorange27.github.io/2023012216/output_5_0.png" alt="png"></p>
<h1 id="Build-15-Convolutional-Neural-Networks"><a href="#Build-15-Convolutional-Neural-Networks" class="headerlink" title="Build 15 Convolutional Neural Networks!"></a>Build 15 Convolutional Neural Networks!</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nets = <span class="number">15</span></span><br><span class="line">model = [<span class="number">0</span>] * nets</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nets):</span><br><span class="line">    model[j] = Sequential()</span><br><span class="line">    </span><br><span class="line">    model[j].add(Conv2D(<span class="number">32</span>,kernel_size=<span class="number">3</span>,activation=<span class="string">&#x27;relu&#x27;</span>,input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Conv2D(<span class="number">32</span>, kernel_size = <span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Conv2D(<span class="number">32</span>, kernel_size = <span class="number">5</span>, strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Dropout(<span class="number">0.4</span>))</span><br><span class="line">    </span><br><span class="line">    model[j].add(Conv2D(<span class="number">64</span>, kernel_size = <span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Conv2D(<span class="number">64</span>, kernel_size = <span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Conv2D(<span class="number">64</span>, kernel_size = <span class="number">5</span>, strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Dropout(<span class="number">0.4</span>))</span><br><span class="line">    </span><br><span class="line">    model[j].add(Conv2D(<span class="number">128</span>, kernel_size = <span class="number">4</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model[j].add(BatchNormalization())</span><br><span class="line">    model[j].add(Flatten())</span><br><span class="line">    model[j].add(Dropout(<span class="number">0.4</span>))</span><br><span class="line">    model[j].add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    model[j].<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h1 id="Train-15-CNNs"><a href="#Train-15-CNNs" class="headerlink" title="Train 15 CNNs"></a>Train 15 CNNs</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="comment"># 调节学习率</span></span><br><span class="line">annealer = LearningRateScheduler(<span class="keyword">lambda</span> x:<span class="number">1e-3</span> * <span class="number">0.95</span> ** x)</span><br><span class="line"><span class="comment"># 训练网络</span></span><br><span class="line">history = [<span class="number">0</span>] * nets</span><br><span class="line">epochs = <span class="number">45</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nets):</span><br><span class="line">    X_train2,X_val2,Y_train2,Y_val2 = train_test_split(X_train,Y_train,test_size=<span class="number">0.1</span>)</span><br><span class="line">    history[j] = model[j].fit(datagen.flow(X_train2,Y_train2,batch_size=<span class="number">64</span>),</span><br><span class="line">                                       epochs=epochs,steps_per_epoch=X_train2.shape[<span class="number">0</span>]//<span class="number">64</span>,</span><br><span class="line">                                       validation_data=(X_val2,Y_val2),callbacks=[annealer],verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CNN&#123;0:d&#125;:Epochs=&#123;1:d&#125;,Train accuracy=&#123;2:.5f&#125;,Validation accuracy=&#123;3:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    j+<span class="number">1</span>,epochs,<span class="built_in">max</span>(history[j].history[<span class="string">&#x27;accuracy&#x27;</span>]),<span class="built_in">max</span>(history[j].history[<span class="string">&#x27;val_accuracy&#x27;</span>])))</span><br></pre></td></tr></table></figure>

<pre><code>CNN1:Epochs=45,Train accuracy=0.99626,Validation accuracy=0.99667
CNN2:Epochs=45,Train accuracy=0.99592,Validation accuracy=0.99690
CNN3:Epochs=45,Train accuracy=0.99648,Validation accuracy=0.99714
CNN4:Epochs=45,Train accuracy=0.99642,Validation accuracy=0.99571
CNN5:Epochs=45,Train accuracy=0.99677,Validation accuracy=0.99405
CNN6:Epochs=45,Train accuracy=0.99661,Validation accuracy=0.99667
CNN7:Epochs=45,Train accuracy=0.99640,Validation accuracy=0.99667
CNN8:Epochs=45,Train accuracy=0.99656,Validation accuracy=0.99595
CNN9:Epochs=45,Train accuracy=0.99637,Validation accuracy=0.99619
CNN10:Epochs=45,Train accuracy=0.99592,Validation accuracy=0.99595
CNN11:Epochs=45,Train accuracy=0.99618,Validation accuracy=0.99738
CNN12:Epochs=45,Train accuracy=0.99589,Validation accuracy=0.99714
CNN13:Epochs=45,Train accuracy=0.99624,Validation accuracy=0.99714
CNN14:Epochs=45,Train accuracy=0.99629,Validation accuracy=0.99595
CNN15:Epochs=45,Train accuracy=0.99648,Validation accuracy=0.99595
CPU times: total: 2d 18h 49min 44s
Wall time: 14h 14min 29s
</code></pre>
<h1 id="集成15个CNN预测结果并呈现"><a href="#集成15个CNN预测结果并呈现" class="headerlink" title="集成15个CNN预测结果并呈现"></a>集成15个CNN预测结果并呈现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SAVE IT</span></span><br><span class="line">save_path = <span class="string">r&#x27;E:\Models\MNIST_CNN_digreg.h5&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nets):</span><br><span class="line">    model[i].save(save_path)</span><br><span class="line"><span class="comment"># 集成并呈现</span></span><br><span class="line">results = np.zeros((X_test.shape[<span class="number">0</span>],<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nets):</span><br><span class="line">    results = results + model[j].predict(X_test)</span><br><span class="line">results = np.argmax(results,axis=<span class="number">1</span>)</span><br><span class="line">results = pd.Series(results,name=<span class="string">&#x27;Label&#x27;</span>)</span><br><span class="line">submission = pd.concat([pd.Series(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">28001</span>),name=<span class="string">&#x27;ImageId&#x27;</span>),results],axis=<span class="number">1</span>)</span><br><span class="line">submission.to_csv(<span class="string">r&quot;E:\MNIST-CNN-ENSEMBLE.csv&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<pre><code>875/875 [==============================] - 17s 19ms/step
875/875 [==============================] - 15s 17ms/step
875/875 [==============================] - 16s 18ms/step
875/875 [==============================] - 15s 17ms/step
875/875 [==============================] - 13s 15ms/step
875/875 [==============================] - 13s 15ms/step
875/875 [==============================] - 14s 16ms/step
875/875 [==============================] - 15s 17ms/step
875/875 [==============================] - 14s 17ms/step
875/875 [==============================] - 14s 16ms/step
875/875 [==============================] - 16s 18ms/step
875/875 [==============================] - 14s 16ms/step
875/875 [==============================] - 16s 19ms/step
875/875 [==============================] - 16s 19ms/step
875/875 [==============================] - 18s 20ms/step
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预览预测内容</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    plt.subplot(<span class="number">4</span>,<span class="number">10</span>,k+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(X_test[k].reshape((<span class="number">28</span>,<span class="number">28</span>)),cmap=plt.cm.binary)</span><br><span class="line">    plt.title(<span class="string">&#x27;predict=%d&#x27;</span> % results[k],y=<span class="number">0.9</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0.3</span>,hspace=-<span class="number">0.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="./irorange27.github.io/2023012216/output_12_0.png" alt="png"></p>
<h1 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h1><p>用cpu进行CNN训练的速度好慢.一次模型训练耗时14h。具体折腾了2天。</p>
<p>但还是收获满满。感觉对深度学习有了大概的了解。对流程、概念有了进一步认知。</p>
<p>但只是照搬别人的而已。我还需要再进一步。加油！</p>
<p>2023&#x2F;1&#x2F;15.</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>TensorFlow</tag>
        <tag>CNN</tag>
        <tag>pandas</tag>
        <tag>matplotlib</tag>
        <tag>Numpy</tag>
        <tag>Kaggle</tag>
        <tag>数据增强</tag>
      </tags>
  </entry>
</search>
